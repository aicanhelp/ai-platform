// Project: SandboxGPUs.
// Author: Ashot Vardanian.
// Created: 04/09/2019.
// Copyright: Check "License" file.
//

#version 450
#extension GL_ARB_separate_shader_objects : enable

#define kWidth 3200
#define kHeight 2400
#define kGroupSize 32
layout (local_size_x = kGroupSize, local_size_y = kGroupSize, local_size_z = 1) in;

struct sPixel {
    vec4 mValue;
};
layout(std140, binding = 0) buffer buf {
    sPixel yImage[];
};

void main() {
    if (gl_GlobalInvocationID.x >= kWidth ||
        gl_GlobalInvocationID.y >= kHeight)
        return;

    float x = float(gl_GlobalInvocationID.x) / float(kWidth);
    float y = float(gl_GlobalInvocationID.y) / float(kHeight);

    // Do rendering.
    float n = 0.0;
    vec2 uv = vec2(x, y);
    vec2 c = vec2(-.445, 0.0) + (uv - 0.5) * (2.0 + 1.7 * 0.2);
    vec2 z = vec2(0.0);
    const int M = 128;
    for (int i = 0; i < M; i ++) {
        z = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;
        if (dot(z, z) > 2)
            break;
        n ++;
    }
          
    float t = float(n) / float(M);

    const vec3 d = vec3(0.3, 0.3 ,0.5);
    const vec3 e = vec3(-0.2, -0.3 ,-0.5);
    const vec3 f = vec3(2.1, 2.0, 3.0);
    const vec3 g = vec3(0.0, 0.1, 0.0);
    // Cosine pallete for color generation:
    vec4 color = vec4(d + e * cos(6.28318 * (f * t + g)), 1.0);


    yImage[kWidth * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].mValue = color;
}
