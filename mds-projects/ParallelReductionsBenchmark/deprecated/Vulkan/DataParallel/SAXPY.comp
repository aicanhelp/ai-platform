// Project: SandboxGPUs.
// Author: Ashot Vardanian.
// Created: 04/09/2019.
// Copyright: Check "License" file.
//

#version 450
//layout(local_size_x_id = 0) in;               // workgroup size (set with .spec(64) on C++ side)

// Push constants is a way to quickly provide a small amount of uniform data to shaders.
// It should be much quicker than UBOs but a huge limitation is the size of data
// - spec requires 128 bytes to be available for a push constant range.
// Hardware vendors may support more, but compared to other means it is still very
// little (for example 256 bytes).
//
// From the application perspective, if shaders want to use push constants,
// they must be specified during pipeline layout creation. Then the `vkCmdPushConstants()`
// command must be recorded into a command buffer. This function takes, among others,
// a pointer to a memory from which data to a push constant range should be copied.
layout(push_constant) uniform Parameters {      // push constants (set with {128, 0.1} on C++ side)
    uint mCount;                                // array size
    float mMultiplier;                          // scaling parameter
} mParams;

layout(std430, binding = 0) buffer lay0 { float zArr[]; }; // array parameters
layout(std430, binding = 1) buffer lay1 { float xArr[]; };

void main() {
    uint const id = gl_GlobalInvocationID.x;    // current offset
    if (mParams.mCount <= id) {                 // drop threads outside the buffer
        return;
    }
    zArr[id] += mParams.mMultiplier * xArr[id]; // saxpy
}
